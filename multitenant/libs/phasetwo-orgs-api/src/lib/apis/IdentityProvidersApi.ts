/* tslint:disable */
/* eslint-disable */
/**
 * Phase Two Admin REST API
 * This is a REST API reference for the Phase Two Keycloak custom resources. These are extensions to the standard [Keycloak Admin REST API](https://www.keycloak.org/docs-api/17.0/rest-api/index.html).  ### Base URI format Paths specified in the documentation are relative to the the base URI. - Format: `https://<host>:<port>/auth/realms` - Example: `https://app.phasetwo.io/auth/realms`  ### Authentication Authentication is achieved by using the `Authentication: Bearer <token>` header in all requests. This is either the access token received from a normal authentication, or by a request directly to the OpenID Connect token endpoint.  It is recommended that you use a Keycloak Admin Client, such as [this one for Javascript](https://github.com/keycloak/keycloak-nodejs-admin-client), as they take care of authentication, getting an access token, and refreshing it when it expires.  #### Client credentials grant example ``` POST /auth/realms/test-realm/protocol/openid-connect/token Host: app.phasetwo.io Accept: application/json Content-type: application/x-www-form-urlencoded  grant_type=client_credentials&client_id=admin-cli&client_secret=fd649804-3a74-4d69-acaa-8f065c6b7da1 ```  #### Password grant example ``` POST /auth/realms/test-realm/protocol/openid-connect/token Host: app.phasetwo.io Accept: application/json Content-type: application/x-www-form-urlencoded  grant_type=password&username=uname@foo.com&password=pwd123AZY&client_id=admin-cli ```  ### SDKs Modern API libraries are available for several common languages. These are available as open source at the links below, or you can choose to generate your own using our [OpenAPI spec file](https://raw.githubusercontent.com/p2-inc/phasetwo-docs/master/openapi.yaml).  | Language | Library | | --- | --- | | Java (and other JVM langs) | https://github.com/p2-inc/phasetwo-java | | JavaScript/TypeScript | https://github.com/p2-inc/phasetwo-js | | Python | https://github.com/p2-inc/phasetwo-python | 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IdentityProviderMapperRepresentation,
  IdentityProviderRepresentation,
} from '../models/index';
import {
    IdentityProviderMapperRepresentationFromJSON,
    IdentityProviderMapperRepresentationToJSON,
    IdentityProviderRepresentationFromJSON,
    IdentityProviderRepresentationToJSON,
} from '../models/index';

export interface AddIdpMapperRequest {
    realm: string;
    orgId: string;
    alias: string;
    identityProviderMapperRepresentation: IdentityProviderMapperRepresentation;
}

export interface CreateIdpRequest {
    realm: string;
    orgId: string;
    identityProviderRepresentation: IdentityProviderRepresentation;
}

export interface DeleteIdpRequest {
    realm: string;
    orgId: string;
    alias: string;
}

export interface DeleteIdpMapperRequest {
    realm: string;
    orgId: string;
    alias: string;
    id: string;
}

export interface GetIdpRequest {
    realm: string;
    orgId: string;
    alias: string;
}

export interface GetIdpMapperRequest {
    realm: string;
    orgId: string;
    alias: string;
    id: string;
}

export interface GetIdpMappersRequest {
    realm: string;
    orgId: string;
    alias: string;
}

export interface GetIdpsRequest {
    realm: string;
    orgId: string;
}

export interface ImportIdpJsonRequest {
    realm: string;
    orgId: string;
}

export interface UpdateIdpRequest {
    realm: string;
    orgId: string;
    alias: string;
    identityProviderRepresentation: IdentityProviderRepresentation;
}

export interface UpdateIdpMapperRequest {
    realm: string;
    orgId: string;
    alias: string;
    id: string;
    identityProviderMapperRepresentation: IdentityProviderMapperRepresentation;
}

/**
 * 
 */
export class IdentityProvidersApi extends runtime.BaseAPI {

    /**
     * Add a mapper to identity provider
     */
    async addIdpMapperRaw(requestParameters: AddIdpMapperRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling addIdpMapper().'
            );
        }

        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling addIdpMapper().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling addIdpMapper().'
            );
        }

        if (requestParameters['identityProviderMapperRepresentation'] == null) {
            throw new runtime.RequiredError(
                'identityProviderMapperRepresentation',
                'Required parameter "identityProviderMapperRepresentation" was null or undefined when calling addIdpMapper().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("access_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{realm}/orgs/{orgId}/idps/{alias}/mappers`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IdentityProviderMapperRepresentationToJSON(requestParameters['identityProviderMapperRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a mapper to identity provider
     */
    async addIdpMapper(requestParameters: AddIdpMapperRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addIdpMapperRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new identity provider for this organization
     */
    async createIdpRaw(requestParameters: CreateIdpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling createIdp().'
            );
        }

        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createIdp().'
            );
        }

        if (requestParameters['identityProviderRepresentation'] == null) {
            throw new runtime.RequiredError(
                'identityProviderRepresentation',
                'Required parameter "identityProviderRepresentation" was null or undefined when calling createIdp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("access_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{realm}/orgs/{orgId}/idps`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IdentityProviderRepresentationToJSON(requestParameters['identityProviderRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new identity provider for this organization
     */
    async createIdp(requestParameters: CreateIdpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createIdpRaw(requestParameters, initOverrides);
    }

    /**
     * Delete the identity provider
     */
    async deleteIdpRaw(requestParameters: DeleteIdpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling deleteIdp().'
            );
        }

        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteIdp().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling deleteIdp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("access_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{realm}/orgs/{orgId}/idps/{alias}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the identity provider
     */
    async deleteIdp(requestParameters: DeleteIdpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteIdpRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a mapper for the identity provider
     */
    async deleteIdpMapperRaw(requestParameters: DeleteIdpMapperRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling deleteIdpMapper().'
            );
        }

        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteIdpMapper().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling deleteIdpMapper().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteIdpMapper().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("access_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{realm}/orgs/{orgId}/idps/{alias}/mappers/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a mapper for the identity provider
     */
    async deleteIdpMapper(requestParameters: DeleteIdpMapperRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteIdpMapperRaw(requestParameters, initOverrides);
    }

    /**
     * Get identity provider for this organization by alias
     */
    async getIdpRaw(requestParameters: GetIdpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityProviderRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling getIdp().'
            );
        }

        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getIdp().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling getIdp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("access_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{realm}/orgs/{orgId}/idps/{alias}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderRepresentationFromJSON(jsonValue));
    }

    /**
     * Get identity provider for this organization by alias
     */
    async getIdp(requestParameters: GetIdpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityProviderRepresentation> {
        const response = await this.getIdpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get mapper by id for the identity provider
     */
    async getIdpMapperRaw(requestParameters: GetIdpMapperRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityProviderMapperRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling getIdpMapper().'
            );
        }

        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getIdpMapper().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling getIdpMapper().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getIdpMapper().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("access_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{realm}/orgs/{orgId}/idps/{alias}/mappers/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderMapperRepresentationFromJSON(jsonValue));
    }

    /**
     * Get mapper by id for the identity provider
     */
    async getIdpMapper(requestParameters: GetIdpMapperRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityProviderMapperRepresentation> {
        const response = await this.getIdpMapperRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get mappers for identity provider
     */
    async getIdpMappersRaw(requestParameters: GetIdpMappersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IdentityProviderMapperRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling getIdpMappers().'
            );
        }

        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getIdpMappers().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling getIdpMappers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("access_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{realm}/orgs/{orgId}/idps/{alias}/mappers`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IdentityProviderMapperRepresentationFromJSON));
    }

    /**
     * Get mappers for identity provider
     */
    async getIdpMappers(requestParameters: GetIdpMappersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IdentityProviderMapperRepresentation>> {
        const response = await this.getIdpMappersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get identity providers for this organization
     */
    async getIdpsRaw(requestParameters: GetIdpsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IdentityProviderRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling getIdps().'
            );
        }

        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getIdps().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("access_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{realm}/orgs/{orgId}/idps`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IdentityProviderRepresentationFromJSON));
    }

    /**
     * Get identity providers for this organization
     */
    async getIdps(requestParameters: GetIdpsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IdentityProviderRepresentation>> {
        const response = await this.getIdpsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Import identity provider from uploaded JSON file
     */
    async importIdpJsonRaw(requestParameters: ImportIdpJsonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling importIdpJson().'
            );
        }

        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling importIdpJson().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("access_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{realm}/orgs/{orgId}/idps/import-config`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Import identity provider from uploaded JSON file
     */
    async importIdpJson(requestParameters: ImportIdpJsonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.importIdpJsonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update identity provider for this organization by alias
     */
    async updateIdpRaw(requestParameters: UpdateIdpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling updateIdp().'
            );
        }

        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateIdp().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling updateIdp().'
            );
        }

        if (requestParameters['identityProviderRepresentation'] == null) {
            throw new runtime.RequiredError(
                'identityProviderRepresentation',
                'Required parameter "identityProviderRepresentation" was null or undefined when calling updateIdp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("access_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{realm}/orgs/{orgId}/idps/{alias}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IdentityProviderRepresentationToJSON(requestParameters['identityProviderRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update identity provider for this organization by alias
     */
    async updateIdp(requestParameters: UpdateIdpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateIdpRaw(requestParameters, initOverrides);
    }

    /**
     * Update a mapper for the identity provider
     */
    async updateIdpMapperRaw(requestParameters: UpdateIdpMapperRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling updateIdpMapper().'
            );
        }

        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateIdpMapper().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling updateIdpMapper().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateIdpMapper().'
            );
        }

        if (requestParameters['identityProviderMapperRepresentation'] == null) {
            throw new runtime.RequiredError(
                'identityProviderMapperRepresentation',
                'Required parameter "identityProviderMapperRepresentation" was null or undefined when calling updateIdpMapper().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("access_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{realm}/orgs/{orgId}/idps/{alias}/mappers/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IdentityProviderMapperRepresentationToJSON(requestParameters['identityProviderMapperRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a mapper for the identity provider
     */
    async updateIdpMapper(requestParameters: UpdateIdpMapperRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateIdpMapperRaw(requestParameters, initOverrides);
    }

}
